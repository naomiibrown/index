public addhtml
<!DOCTYPE html>
<html>
<head>
  <title>Add Employee</title>
</head>
<body>
  <h1>Add New Employee</h1>
  <form id="addForm">
    <input name="id" placeholder="ID" required><br>
    <input name="name" placeholder="Name" required><br>
    <input name="department" placeholder="Department"><br>
    <input name="designation" placeholder="Designation"><br>
    <input name="salary" placeholder="Salary" type="number"><br>
    <input name="joiningDate" type="date"><br>
    <button type="submit">Add</button>
  </form>
  <script>
    document.getElementById('addForm').onsubmit = async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const data = Object.fromEntries(formData.entries());
      data.id = parseInt(data.id);
      data.salary = parseFloat(data.salary);
      const res = await fetch('/api/employees', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
      alert('Employee added!');
      window.location.href = 'index.html';
    };
  </script>
</body>
</html>

public indexhtml
<!DOCTYPE html>
<html>
<head>
  <title>Employees</title>
</head>
<body>
  <h1>Employee List</h1>
  <a href="add.html">Add Employee</a>
  <table border="1" id="employeeTable"></table>
  <script src="script.js"></script>
</body>
</html>


public scriptjs
window.onload = async () => {
    const res = await fetch('/api/employees');
    const employees = await res.json();
    const table = document.getElementById('employeeTable');
    table.innerHTML = `
      <tr>
        <th>ID</th><th>Name</th><th>Department</th><th>Designation</th>
        <th>Salary</th><th>Joining Date</th><th>Actions</th>
      </tr>` +
      employees.map(e => `
        <tr>
          <td>${e.id}</td>
          <td>${e.name}</td>
          <td>${e.department}</td>
          <td>${e.designation}</td>
          <td>${e.salary}</td>
          <td>${new Date(e.joiningDate).toLocaleDateString()}</td>
          <td>
            <a href="update.html?id=${e.id}">Edit</a> |
            <a href="#" onclick="deleteEmp(${e.id})">Delete</a>
          </td>
        </tr>`).join('');
  };
  
  async function deleteEmp(id) {
    if (confirm("Are you sure?")) {
      await fetch(`/api/employees/custom/${id}`, { method: 'DELETE' });
      alert('Deleted!');
      window.location.reload();
    }
  }
  
  public updatehtml
  <!DOCTYPE html>
<html>
<head>
  <title>Update Employee</title>
</head>
<body>
  <h1>Update Employee</h1>
  <form id="updateForm">
    <input name="name" placeholder="Name"><br>
    <input name="department" placeholder="Department"><br>
    <input name="designation" placeholder="Designation"><br>
    <input name="salary" placeholder="Salary" type="number"><br>
    <input name="joiningDate" type="date"><br>
    <button type="submit">Update</button>
  </form>
  <script>
    const urlParams = new URLSearchParams(window.location.search);
    const id = urlParams.get('id');

    window.onload = async () => {
      const res = await fetch(`/api/employees/custom/${id}`);
      const emp = await res.json();
      for (const key in emp) {
        if (document.querySelector(`[name="${key}"]`))
          document.querySelector(`[name="${key}"]`).value = emp[key];
      }
    };

    document.getElementById('updateForm').onsubmit = async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const data = Object.fromEntries(formData.entries());
      data.salary = parseFloat(data.salary);
      const res = await fetch(`/api/employees/custom/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
      alert('Employee updated!');
      window.location.href = 'index.html';
    };
  </script>
</body>
</html>


serverjs
const express = require('express');
const mongoose = require('mongoose');
const path = require('path');

const app = express();
app.use(express.json());
app.use(express.static('public'));

// Connect to MongoDB
mongoose.connect('mongodb://127.0.0.1:27017/employeeDB', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

// Define schema
const employeeSchema = new mongoose.Schema({
  id: Number,
  name: String,
  department: String,
  designation: String,
  salary: Number,
  joiningDate: Date
});

const Employee = mongoose.model('Employee', employeeSchema);

// Get all employees
app.get('/api/employees', async (req, res) => {
  const employees = await Employee.find();
  res.json(employees);
});

// Get one employee by custom id
app.get('/api/employees/custom/:id', async (req, res) => {
  const emp = await Employee.findOne({ id: parseInt(req.params.id) });
  if (!emp) return res.status(404).json({ error: 'Not found' });
  res.json(emp);
});

// Add a new employee
app.post('/api/employees', async (req, res) => {
  const emp = new Employee(req.body);
  await emp.save();
  res.json(emp);
});

// Update by custom id
app.put('/api/employees/custom/:id', async (req, res) => {
  const emp = await Employee.findOneAndUpdate(
    { id: parseInt(req.params.id) },
    req.body,
    { new: true }
  );
  res.json(emp);
});

// Delete by custom id
app.delete('/api/employees/custom/:id', async (req, res) => {
  const emp = await Employee.findOneAndDelete({ id: parseInt(req.params.id) });
  res.json({ message: 'Deleted' });
});

app.listen(3000, () => console.log('Server running at http://localhost:3000'));
